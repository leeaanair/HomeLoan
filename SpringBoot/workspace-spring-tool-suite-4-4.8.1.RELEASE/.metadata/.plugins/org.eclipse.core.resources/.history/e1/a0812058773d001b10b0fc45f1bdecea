package com.lti.spring.HomeLoan.dao;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;

@Service
public class FilesStorageServiceImpl implements FileStorageService {

	private final String root = "uploads";
	Path pathRoot = Paths.get(root);

  @Override
  public void init() {
    try {
    	
    	File file = new File(root);
    	  if (!file.exists()) {
    		  System.out.println("folder does not exist");
    		  file.mkdir();
    	  }

    } catch (Exception e) {
      throw new RuntimeException("Could not initialize folder for upload!");
    }
  }

//  @Override
//  public void save(MultipartFile file) {
//    try {
//      Files.copy(file.getInputStream(), this.root.resolve(file.getOriginalFilename()));
//    } catch (Exception e) {
//      throw new RuntimeException("Could not store the file. Error: " + e.getMessage());
//    }
//  }
  
  
  public void save(MultipartFile file, String id, String newName) {
	  
    try {
    	
  	  //String pathString = root+"/"+id;
      Path path = Paths.get(root+"/"+id);
  	  File file1 = new File(root+"/"+id);

  	  if (!file1.exists()) 
  	  {
  		  	file1.mkdir();
  	  }

      Files.copy(file.getInputStream(), path.resolve(newName));
    } 
    catch (Exception e) {
      throw new RuntimeException("Could not store the file. Error: " + e.getMessage());
    }
  }


  @Override
  public Resource load(String filename) {
    try {
      Path file = root.resolve(filename);
      Resource resource = new UrlResource(file.toUri());

      if (resource.exists() || resource.isReadable()) {
        return resource;
      } else {
        throw new RuntimeException("Could not read the file!");
      }
    } catch (MalformedURLException e) {
      throw new RuntimeException("Error: " + e.getMessage());
    }
  }

  @Override
  public void deleteAll() {
    FileSystemUtils.deleteRecursively(root.toFile());
  }

  @Override
  public Stream<Path> loadAll() {
    try {
      return Files.walk(this.root, 1).filter(path -> !path.equals(this.root)).map(this.root::relativize);
    } catch (IOException e) {
      throw new RuntimeException("Could not load the files!");
    }
  }

}